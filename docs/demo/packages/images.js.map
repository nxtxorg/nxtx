{"version":3,"file":"images.js","sources":["../../../src/nxtx-types.ts","../../../src/packages/images.ts"],"sourcesContent":["export interface Node {\r\n    type: NodeType,\r\n    value?: any,\r\n    name?: string,\r\n    args?: Array<Node>\r\n}\r\nexport enum NodeType {\r\n    Paragraph = 1,\r\n    Command,\r\n    Text,\r\n    Block,\r\n    Html,\r\n    Node,\r\n    Dictionary = 11,\r\n    Array,\r\n    Number,\r\n    String\r\n}\r\n\r\nexport interface ArgumentCheck {\r\n    expected: NodeType,\r\n    actual: NodeType,\r\n    index: number\r\n}\r\nexport interface ArgumentCheckResult {\r\n    ok: boolean,\r\n    invalid: Array<ArgumentCheck>\r\n}\r\n\r\ntype CommandResultTypes = Node | HTMLElement | Text | undefined | void\r\ntype CommandResultType = Promise<CommandResultTypes> | CommandResultTypes\r\nexport type CommandResult = Array<CommandResultType> | CommandResultType\r\nexport type CommandFunction = (...args:Array<Node>) => CommandResult\r\n\r\nexport interface Package {\r\n    name: string,\r\n    requires?: Array<string>,\r\n    commands?: { [name:string]: CommandFunction },\r\n    preprocessors?: { [name:string]: CommandFunction },\r\n    hooks?: { prerender?:()=>void, postrender?:()=>void }\r\n}\r\n\r\nexport interface INxtx {\r\n    registerCommand: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\r\n    registerPreprocessor: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\r\n    verifyArguments: (types:Array<NodeType>, ...args:Array<Node>) => ArgumentCheckResult\r\n    registerPackage: (pkg:Package) => void\r\n\r\n    parse: (code:string) => Array<Node>\r\n    render: (code:string, root:HTMLElement) => Promise<void>\r\n\r\n    text: (content:string) => Text\r\n    htmlLite: (nodeName:string, attributes:object, ...children:Array<HTMLElement|string>) => HTMLElement\r\n    html: (nodeName:string, attributes:object, ...children:Array<Promise<HTMLElement|Node|string>|HTMLElement|Node|string>) => Promise<HTMLElement>\r\n\r\n    on: (event:string, handler:()=>void) => void\r\n    off: (event:string, handler:()=>void) => void\r\n}","/*  Image package for nxtx\n    Author: Malte Rosenbjerg\n    License: MIT */\n\nimport {NodeType, Package, INxtx} from '../nxtx-types';\ndeclare const nxtx: INxtx;\n\nconst pkg : Package = {\n    name: 'images',\n    commands: {\n        'image': (srcNode, pctNode = { type: NodeType.Number, value: 100 }) => nxtx.htmlLite('img', { src: srcNode.value, style: `max-width: ${pctNode.value}%` }),\n        'images': (srcArray) => srcArray.value.map(srcNode => nxtx.htmlLite('img', { src: srcNode.value, style: `max-width: calc(${(99.9 / srcArray.value.length)}% - 4px); margin: 2px` }))\n    }\n};\n\nif (nxtx) nxtx.registerPackage(pkg);\n\nexport default pkg;"],"names":[],"mappings":";;;IAMA,IAAY,QAWX;IAXD,WAAY,QAAQ;QAChB,iDAAa,CAAA;QACb,6CAAO,CAAA;QACP,uCAAI,CAAA;QACJ,yCAAK,CAAA;QACL,uCAAI,CAAA;QACJ,uCAAI,CAAA;QACJ,oDAAe,CAAA;QACf,0CAAK,CAAA;QACL,4CAAM,CAAA;QACN,4CAAM,CAAA;IACV,CAAC,EAXW,QAAQ,KAAR,QAAQ,QAWnB;;ICVD,IAAM,GAAG,GAAa;QAClB,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE;YACN,OAAO,EAAE,UAAC,OAAO,EAAE,OAA+C;gBAA/C,wBAAA,EAAA,YAAY,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE;gBAAK,OAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,gBAAc,OAAO,CAAC,KAAK,MAAG,EAAE,CAAC;aAAA;YAC1J,QAAQ,EAAE,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,sBAAoB,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,0BAAuB,EAAE,CAAC,GAAA,CAAC,GAAA;SACvL;KACJ,CAAC;IAEF,IAAI,IAAI;QAAE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;;;;;;;;"}