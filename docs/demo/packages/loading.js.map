{"version":3,"file":"loading.js","sources":["../../../src/packages/loading.js"],"sourcesContent":["/*  Package for loading documents and packages\r\n    Author: Malte Rosenbjerg\r\n    License: MIT */\r\n\r\nlet loaded = {\r\n    documents: {},\r\n    packages: []\r\n};\r\n\r\nconst pkg = {\r\n    name: 'loading',\r\n    preprocessors: {\r\n        'load:document': async nameNode => {\r\n            const name = nameNode.value.toString();\r\n            const filename = (name.substr(name.length - 5).toLowerCase() !== '.nxtx') ? `${name}.nxtx` : name;\r\n            const response = await fetch(filename);\r\n            if (!response.ok) return console.error(`NxTx document ${filename} not found`);\r\n\r\n            const lastModified = response.headers.get('last-modified');\r\n            const cached = loaded.documents[filename];\r\n            if (lastModified && cached && cached.lastModified === lastModified) {\r\n                console.log('using cached', filename);\r\n                return loaded.documents[filename].nodes;\r\n            }\r\n\r\n            const content = await response.text();\r\n            const nodes = nxtx.parse(content);\r\n            if (lastModified) {\r\n                loaded.documents[filename] = {lastModified, nodes};\r\n            }\r\n            return nodes;\r\n        },\r\n\r\n        'load:package': srcNode => new Promise((acc, rej) => {\r\n            if (loaded.packages[srcNode.value])\r\n                return acc();\r\n            loaded.packages[srcNode.value] = true;\r\n            const script = document.createElement('script');\r\n            script.src = srcNode.value;\r\n            script.async = true;\r\n            script.onreadystatechange = script.onload = () => {\r\n                if (!acc.done && (!script.readyState || /loaded|complete/.test(script.readyState))) {\r\n                    acc.done = true;\r\n                    acc();\r\n                }\r\n            };\r\n            document.head.appendChild(script);\r\n        })\r\n    }\r\n};\r\n\r\nif (nxtx) {\r\n    Object.keys(pkg.preprocessors).forEach(name => nxtx.registerPreprocessor(name, pkg.preprocessors[name]));\r\n}\r\n\r\nexport default pkg;"],"names":["loaded","documents","packages","pkg","name","preprocessors","load:document","async","nameNode","value","toString","filename","substr","length","toLowerCase","response","fetch","ok","console","error","lastModified","headers","get","cached","log","nodes","content","text","nxtx","parse","load:package","srcNode","Promise","acc","rej","script","document","createElement","src","onreadystatechange","onload","done","readyState","test","head","appendChild","Object","keys","forEach","registerPreprocessor"],"mappings":"yCAIA,IAAIA,EAAS,CACTC,UAAW,GACXC,SAAU,IAGd,MAAMC,EAAM,CACRC,KAAM,UACNC,cAAe,CACXC,gBAAiBC,MAAAA,IACb,MAAMH,EAAOI,EAASC,MAAMC,WACtBC,EAA2D,UAA/CP,EAAKQ,OAAOR,EAAKS,OAAS,GAAGC,iBAAgCV,SAAcA,EACvFW,QAAiBC,MAAML,GAC7B,IAAKI,EAASE,GAAI,OAAOC,QAAQC,uBAAuBR,eAExD,MAAMS,EAAeL,EAASM,QAAQC,IAAI,iBACpCC,EAASvB,EAAOC,UAAUU,GAChC,GAAIS,GAAgBG,GAAUA,EAAOH,eAAiBA,EAElD,OADAF,QAAQM,IAAI,eAAgBb,GACrBX,EAAOC,UAAUU,GAAUc,MAGtC,MAAMC,QAAgBX,EAASY,OACzBF,EAAQG,KAAKC,MAAMH,GAIzB,OAHIN,IACApB,EAAOC,UAAUU,GAAY,CAACS,aAAAA,EAAcK,MAAAA,IAEzCA,GAGXK,eAAgBC,GAAW,IAAIC,QAAQ,CAACC,EAAKC,KACzC,GAAIlC,EAAOE,SAAS6B,EAAQtB,OACxB,OAAOwB,IACXjC,EAAOE,SAAS6B,EAAQtB,QAAS,EACjC,MAAM0B,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAMP,EAAQtB,MACrB0B,EAAO5B,OAAQ,EACf4B,EAAOI,mBAAqBJ,EAAOK,OAAS,KACnCP,EAAIQ,MAAUN,EAAOO,aAAc,kBAAkBC,KAAKR,EAAOO,cAClET,EAAIQ,MAAO,EACXR,MAGRG,SAASQ,KAAKC,YAAYV,cAKlCP,MACAkB,OAAOC,KAAK5C,EAAIE,eAAe2C,QAAQ5C,GAAQwB,KAAKqB,qBAAqB7C,EAAMD,EAAIE,cAAcD"}